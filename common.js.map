{"version":3,"sources":["webpack:///./node_modules/amcharts3-angular2/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2F;AAC3F;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpiBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC;AAC4B;AAC7B;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa,IAAI;AACjB;AACA,gDAAgD;AAChD,KAAK,OAAO,wDAAU,GAAG;AACzB,KAAK,OAAO,oDAAM,GAAG;AACrB,EAAE;AACF;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA,wDAAwD,8CAA8C,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AAC0B;AAC3B;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;AACA,8CAA8C;AAC9C,KAAK,OAAO,oDAAM,GAAG;AACrB,EAAE;AACF;AACA;AACA;AACA;AACA,CAAC;AACyB;AAC1B;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA,6CAA6C,WAAW;AACxD,iC","file":"common.js","sourcesContent":["import { Directive, ElementRef, Input, NgZone, NgModule, Injectable } from \"@angular/core\";\nfunction getType(x) {\n    return {}.toString.call(x);\n}\nfunction hasOwnKey(obj, key) {\n    return {}.hasOwnProperty.call(obj, key);\n}\nfunction copyObject(x) {\n    var output = {};\n    for (var key in x) {\n        if (hasOwnKey(x, key)) {\n            output[key] = copy(x[key]);\n        }\n    }\n    return output;\n}\nfunction copyArray(x) {\n    var length = x.length;\n    var output = new Array(length);\n    for (var i = 0; i < length; ++i) {\n        output[i] = copy(x[i]);\n    }\n    return output;\n}\nfunction copy(x) {\n    switch (getType(x)) {\n        case \"[object Array]\":\n            return copyArray(x);\n        case \"[object Object]\":\n            return copyObject(x);\n        case \"[object Date]\":\n            return new Date(x.getTime());\n        default:\n            return x;\n    }\n}\nfunction isNaN(x) {\n    return x !== x;\n}\nfunction isNumberEqual(x, y) {\n    return x === y || (isNaN(x) && isNaN(y));\n}\nfunction removeChartListeners(chart, x, y) {\n    if (x !== y) {\n        if (x == null) {\n            x = [];\n        }\n        if (y == null) {\n            y = [];\n        }\n        var xLength = x.length;\n        var yLength = y.length;\n        for (var i = 0; i < xLength; ++i) {\n            var xValue = x[i];\n            var has = false;\n            for (var j = 0; j < yLength; ++j) {\n                var yValue = y[j];\n                if (xValue.event === yValue.event &&\n                    xValue.method === yValue.method) {\n                    has = true;\n                    break;\n                }\n            }\n            if (!has) {\n                chart.removeListener(chart, xValue.event, xValue.method);\n            }\n        }\n    }\n}\nfunction updateArray(a, x, y) {\n    var didUpdate = false;\n    if (x !== y) {\n        var xLength = x.length;\n        var yLength = y.length;\n        if (xLength !== yLength) {\n            a.length = yLength;\n            didUpdate = true;\n        }\n        for (var i = 0; i < yLength; ++i) {\n            if (i < xLength) {\n                if (update(a, i, x[i], y[i])) {\n                    didUpdate = true;\n                }\n            }\n            else {\n                a[i] = copy(y[i]);\n                didUpdate = true;\n            }\n        }\n    }\n    return didUpdate;\n}\nfunction update(obj, key, x, y) {\n    var didUpdate = false;\n    if (x !== y) {\n        var xType = getType(x);\n        var yType = getType(y);\n        if (xType === yType) {\n            switch (xType) {\n                case \"[object Array]\":\n                    if (updateArray(obj[key], x, y)) {\n                        didUpdate = true;\n                    }\n                    break;\n                case \"[object Object]\":\n                    if (updateObject(obj[key], x, y)) {\n                        didUpdate = true;\n                    }\n                    break;\n                case \"[object Date]\":\n                    if (x.getTime() !== y.getTime()) {\n                        obj[key] = copy(y);\n                        didUpdate = true;\n                    }\n                    break;\n                case \"[object Number]\":\n                    if (!isNumberEqual(x, y)) {\n                        obj[key] = copy(y);\n                        didUpdate = true;\n                    }\n                    break;\n                default:\n                    if (x !== y) {\n                        obj[key] = copy(y);\n                        didUpdate = true;\n                    }\n                    break;\n            }\n        }\n        else {\n            obj[key] = copy(y);\n            didUpdate = true;\n        }\n    }\n    return didUpdate;\n}\nfunction updateObject(chart, oldObj, newObj) {\n    var didUpdate = false;\n    if (oldObj !== newObj) {\n        for (var key in newObj) {\n            if (hasOwnKey(newObj, key)) {\n                if (hasOwnKey(oldObj, key)) {\n                    if (key === \"listeners\") {\n                        removeChartListeners(chart, oldObj[key], newObj[key]);\n                    }\n                    if (update(chart, key, oldObj[key], newObj[key])) {\n                        didUpdate = true;\n                    }\n                }\n                else {\n                    chart[key] = copy(newObj[key]);\n                    didUpdate = true;\n                }\n            }\n        }\n        for (var key in oldObj) {\n            if (hasOwnKey(oldObj, key) && !hasOwnKey(newObj, key)) {\n                if (key === \"listeners\") {\n                    removeChartListeners(chart, oldObj[key], []);\n                }\n                delete chart[key];\n                didUpdate = true;\n            }\n        }\n    }\n    return didUpdate;\n}\nvar AmChartsDirective = (function () {\n    function AmChartsDirective(el, _zone) {\n        this._zone = _zone;\n        console.warn(\"Using the <amCharts> element is deprecated: use AmChartsService instead\");\n        this.el = el.nativeElement;\n    }\n    AmChartsDirective.prototype.ngOnChanges = function (x) {\n        var _this = this;\n        if (x.options) {\n            if (this.chart) {\n                this._zone.runOutsideAngular(function () {\n                    var didUpdate = updateObject(_this.chart, x.options.previousValue, x.options.currentValue);\n                    if (didUpdate) {\n                        _this.chart.validateNow(true);\n                    }\n                });\n            }\n        }\n    };\n    AmChartsDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            var props = copy(_this.options);\n            _this.el.id = _this.id;\n            _this.el.style.display = \"block\";\n            _this.chart = AmCharts.makeChart(_this.id, props);\n        });\n    };\n    AmChartsDirective.prototype.ngOnDestroy = function () {\n        var _this = this;\n        if (this.chart) {\n            this._zone.runOutsideAngular(function () {\n                _this.chart.clear();\n            });\n        }\n    };\n    return AmChartsDirective;\n}());\nexport { AmChartsDirective };\nAmChartsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: \"amCharts\"\n            },] },\n];\nAmChartsDirective.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: NgZone, },\n]; };\nAmChartsDirective.propDecorators = {\n    'id': [{ type: Input },],\n    'options': [{ type: Input },],\n};\nvar AmChartsService = (function () {\n    function AmChartsService(zone) {\n        this.zone = zone;\n    }\n    AmChartsService.prototype.makeChart = function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return this.zone.runOutsideAngular(function () { return AmCharts.makeChart.apply(AmCharts, a); });\n    };\n    AmChartsService.prototype.updateChart = function (chart, fn) {\n        this.zone.runOutsideAngular(function () {\n            fn();\n            chart.validateNow(true);\n        });\n    };\n    AmChartsService.prototype.destroyChart = function (chart) {\n        this.zone.runOutsideAngular(function () {\n            chart.clear();\n        });\n    };\n    return AmChartsService;\n}());\nexport { AmChartsService };\nAmChartsService.decorators = [\n    { type: Injectable },\n];\nAmChartsService.ctorParameters = function () { return [\n    { type: NgZone, },\n]; };\nvar AmChartsModule = (function () {\n    function AmChartsModule() {\n    }\n    return AmChartsModule;\n}());\nexport { AmChartsModule };\nAmChartsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    AmChartsDirective\n                ],\n                exports: [\n                    AmChartsDirective\n                ],\n                providers: [\n                    AmChartsService\n                ]\n            },] },\n];\nAmChartsModule.ctorParameters = function () { return []; };\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}